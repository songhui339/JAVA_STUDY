package com.kh.algorithm.practice;

import java.util.Arrays;

/*
 * 경상현 담당
 * 
 * Insertion Sort [삽입 정렬]
 * 
 *   - 삽입 정렬은 현재 비교하고자 하는 target(타겟)과 그 이전의 원소들과 비교하며 자리를 교환(swap)하는 정렬 방법이다.
 *   - 삽입 정렬은 데이터를 '비교'하면서 찾기 때문에 '비교 정렬'이며 정렬의 대상이 되는 데이터 외에 추가적인 공간을 필요로 하지 않기 때문에 '제자리 정렬(in-place sort)'이기도 하다.
 *   - 정확히는 데이터를 서로 교환하는 과정(swap)에서 임시 변수를 필요로 하나, 이는 충분히 무시할 만큼 적은 양이기 때문에 제자리 정렬로 보는 것이다. 이는 선택정렬과도 같은 부분이다.
 *
 * 삽입 정렬의 과정 (오름차순을 기준으로 설명)
 *   1. 현재 타겟이 되는 숫자와 이전 위치에 있는 원소들을 비교한다. (첫 번째 타겟은 두 번째 원소부터 시작한다.)
 *   2. 타겟이 되는 숫자가 이전 위치에 있던 원소보다 작다면 위치를 서로 교환한다.
 *   3. 그 다음 타겟을 찾아 위와 같은 방법으로 반복한다. 
 */

public class C_InsertionSort_SH {
	
	public void method() {
		
		int[] a = { 3, 5, 1, 2, 4 };
		
		for (int i = 1; i < a.length; i++) {
			int target = a[i];                     // 선택된 숫자를 임시 저장
			int j = i - 1;                         // 비교 대상의 위치
			while (j >= 0 && a[j] > target) {      // 왼쪽 끝까지 가거나, 자신보다 작은 수를 만나기 전까지 이동하면 삽입될 위치를 찾음
				a[j + 1] = a[j];                   // 나보다 큰 수는 오른쪽으로 한칸 이동
				j--;                               // 그 다음 비교대상을 왼쪽으로 한 칸 이동
			}
			
			/*
			 * 위 반복문에서 탈출 하는 경우 앞의 원소가 타겟보다 작다는 의미이므로
			 * 타켓 원소는 j번째 원소 뒤에 와야한다.
			 * 그러므로 타겟은 j + 1에 위치하게 된다.
			 */
		
			a[j + 1] = target;                     // 적정한 위치를 찾아 선택된 숫자를 삽입
		}
		
		System.out.println(Arrays.toString(a));
	}

}

